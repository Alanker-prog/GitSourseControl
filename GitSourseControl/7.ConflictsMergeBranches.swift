//
//  7.ConflictsMergeBranches.swift
//  GitSourseControl
//
//  Created by Алан Парастаев on 19.08.2025.
//

import SwiftUI
/*
    Конфликт веток образуется так ,если я создал ветку и работаю в ней во вкладке ContentView и создаю внутри функцию (и давайте представим что другой разработчик тоже создал свою ветку и тоже меняет код в ContentView но в своей ветке), далее код другог разрабочика готов и он объеденяет свою ветку с основной(main) веткой, позже моя функция тоже готова и пытаюсь объеденить свою ветку с омновной(main) веткой , и происходит конфликт версий ContentView их получается две версии и нужно вручную выбрать правильную верчсию
 ✅ Если я попытался отправить свою ветку и случился конфликт, появится окно с текстом "No File to Compare" и слева у имени файла например ContentView будет красная буква "С" , это значит что открылся экран для разрешения конфликтов. Далее жмем на на свифт фаил например ContentView и отобразятся две разные версии ContentView, посередине между ними будет знак вопроса ,жмем на галочку рядом с вопросительным знаком и там есть 4 варианта выбора 1.Left(левый) 2.Right(правый) 3.Choose Left Then Right(если выбрать это вариант он оставит левый файл и дабавит в левый файл измиенения из правого файла ,тоесть он возмет код и вставит его в левую версию файла и обеденит в один файл) 4. делает обратное действие 3. кнопке. Кагда выбрал правильный файл жмем Merge и после этого мы сможем объеденить ветки
 ✅ Бывает если главный инжинер дает задание с Тикетом Jira и код тикета обычно такой -> XZR123, обычно этот код тикета вписывают в название ветки ПРИМЕР -> al/XZR123-update_feature, это позволит увтдить другим инжинерам что над этим заданием(тикетом) уже работают и будет меньше конфликтов веток.  (Jira Ticketing System) — это цифровая запись, которая представляет задачу, проблему, запрос или другой элемент работы в проекте. Тикет — центральный хаб для информации, связанной с конкретной задачей, что позволяет членам команды сотрудничать, обновлять прогресс и обеспечивать ответственность.
 ❌ Также при конфликте файлов можно частично соеденить оба файла и сохранить так! Например мы выбрали левый файл , но мы можем так же скопировать часть кода из правого файла и вставить в его левый файл и сохранить в таком виде
 ✅ В Кракене после конфликта и последующего слияния можно написать комит какой файл ты в итоге выбрал и что поменял
 */
struct ConflictsMergeBranches: View {
    var body: some View {
        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
    }
}

#Preview {
    ConflictsMergeBranches()
}
